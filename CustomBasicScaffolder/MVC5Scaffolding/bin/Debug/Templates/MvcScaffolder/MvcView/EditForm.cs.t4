<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>

<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.

foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }
#>
<#if (property.IsPrimaryKey){#>
@if (Model != null && Model.<#= property.PropertyName #> != null)
{
    @Html.HiddenFor(model => model.<#= property.PropertyName #>)
}
else
{
<#}#>
        <div class="form-group">
<#
        if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, "<#= GetAssociationName(property) #>", htmlAttributes: new { @class = "control-label col-md-2" })
<#
        } else {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        }
#>
            <div class="col-md-10">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
                @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                <!--div class="checkbox"-->
<#
                PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #><#= OutputEditorTemplateOrFormAttributes(property.ShortTypeName) #>)
<#
            } 
        } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #><#= OutputEditorTemplate(property.ShortTypeName) #>)
<#
        }
#>
<# 
        if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>,"" , new { @class = "text-danger" })
<#        
        } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
                <!--/div-->
<#
        }
#>
            </div>
        </div>
<#if (property.IsPrimaryKey){#>
}
<#}#>
		
<# 
    }
}
#>

<#
    if( GenerateMasterDetailRelationship && OneToManyModelMetadata.Count>0)
    {
#>
	<div role="tabpanel">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
<#
		var idx=0;
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
			
            if ( property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            {
#>
				<#  if(idx==0)  {#>
				<li role="presentation" class="active"><a href="#tab-<#=property.PropertyName   #>" aria-controls="tab-<#=property.PropertyName   #>" role="tab" data-toggle="tab"><#=                    GetDisplayName(property.PropertyName) #></a></li>		 
				<# } else { #>
				<li role="presentation"  ><a href="#tab-<#=property.PropertyName   #>" aria-controls="tab-<#=property.PropertyName   #>" role="tab" data-toggle="tab"><#=                    GetDisplayName(property.PropertyName) #></a></li>		 		 
				<# } #>
				        
			 
<# 
				idx ++;
            }
        }
#>   
		 </ul>
		 <!-- Tab panes -->
         <div class="tab-content">
		  <#
			idx=0;
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
            if (property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            {
                var childrenmodelmeta=OneToManyModelMetadata[property.PropertyName];
          #>

		  <div role="tabpanel" class="tab-pane <#= idx>0?"":"active"  #>" id="tab-<#=property.PropertyName   #>">
                <div id="toolbar" class="btn-group">
                    <button type="button" id="add<#= property.PropertyName #>button" class="btn btn-default">
                        <i class="glyphicon glyphicon-plus"></i>
                    </button>

                    <button type="button" id="remove<#= property.PropertyName #>button" class="btn btn-default">
                        <i class="glyphicon glyphicon-trash"></i>
                    </button>
                </div>
                <table id="<#= property.PropertyName.ToLower()  #>-table" data-search="true"
                       data-flat="false"
                       data-toolbar="#toolbar"
                       data-pagination="true"
                       data-show-refresh="true"
                       data-show-toggle="true"
                       data-show-columns="true">
                    <thead>
                        <tr>
                            <th data-formatter="rowindexFormatter">#No</th>
		<#  
	foreach (PropertyMetadata chproperty in childrenmodelmeta.Properties) {
    if (chproperty.Scaffold && !chproperty.IsAutoGenerated && !chproperty.IsReadOnly && !chproperty.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (chproperty.IsPrimaryKey && IsPropertyGuid(chproperty)) {
            continue;
        }
		#>
		
                            <th data-field="<#= chproperty.PropertyName  #>"><#= GetDisplayName(chproperty.PropertyName)  #></th>
        <# 
    }
    }
		 #>
                            <th data-field="action" data-formatter="actionFormatter" data-events="actionEvents">Action</th>
                        </tr>
                    </thead>
                </table>

            </div>

		  <# 
            }
        }
		  #>

	</div>
</div>



<# } #>


<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
<#+
string OutputEditorTemplate(string typeName){
        return( typeName=="DateTime" ? ", \"Date\"" : "");
}

string OutputEditorTemplateOrFormAttributes(string typeName){
        return( typeName=="DateTime" ? ", \"Date\"" : ", new { htmlAttributes = new { @class = \"form-control\" } }" );
}
#>