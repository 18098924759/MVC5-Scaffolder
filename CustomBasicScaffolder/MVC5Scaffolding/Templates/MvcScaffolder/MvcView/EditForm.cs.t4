<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ include file="Imports.include.t4" #>
@model <#= ViewDataTypeName #>

<# var primaryKey = ModelMetadata.PrimaryKeys[0].PropertyName; #>

 @*@Html.HiddenFor(model => model.<#= primaryKey #>)*@

<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
bool isControlHtmlAttributesSupported = MvcVersion >= requiredMvcVersion;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.

foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsAutoGenerated && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }
#>
<#if (property.IsPrimaryKey){#>
@if (Model != null && Model.<#= property.PropertyName #> != null)
{
    @Html.HiddenFor(model => model.<#= property.PropertyName #>)
}
else
{
<#}#>
        <div class="form-group">
<#
        if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        } else {
#>
            @Html.LabelFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "control-label col-md-2" })
<#
        }
#>
            <div class="col-md-10">
<#
        bool isCheckbox = property.TypeName.Equals(boolType);
        if (property.IsForeignKey) {
#>
<# 
            if (isControlHtmlAttributesSupported) {
#>
                @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.DropDownList("<#= property.PropertyName #>", String.Empty)
<#
            }
#>
<#
        } else  if (isControlHtmlAttributesSupported) {
            if (isCheckbox) {
#>
                <!--div class="checkbox"-->
<#
                PushIndent("    ");
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
<#
            } else if (property.IsEnum && !property.IsEnumFlags) {
#>
                @Html.EnumDropDownListFor(model => model.<#= property.PropertyName #>, htmlAttributes: new { @class = "form-control" })
<#
            } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #><#= OutputEditorTemplateOrFormAttributes(property.ShortTypeName) #>)
<#
            } 
        } else {
#>
                @Html.EditorFor(model => model.<#= property.PropertyName #><#= OutputEditorTemplate(property.ShortTypeName) #>)
<#
        }
#>
<# 
        if (isControlHtmlAttributesSupported) {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>,"" , new { @class = "text-danger" })
<#        
        } else {
#>
                @Html.ValidationMessageFor(model => model.<#= property.PropertyName #>)
<#      
        }
#>
<#
        if (isCheckbox && isControlHtmlAttributesSupported) {
            PopIndent();
#>
                <!--/div-->
<#
        }
#>
            </div>
        </div>
<#if (property.IsPrimaryKey){#>
}
<#}#>
		
<# 
    }
}
#>

<#
    if( GenerateMasterDetailRelationship && OneToManyModelMetadata.Count>0)
    {
#>
	<div role="tabpanel">
        <!-- Nav tabs -->
        <ul class="nav nav-tabs" role="tablist">
<#
		var idx=0;
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
			
            if ( property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            {
#>
				<#  if(idx==0)  {#>
				<li role="presentation" class="active"><a href="#tab-<#=property.PropertyName   #>" aria-controls="tab-<#=property.PropertyName   #>" role="tab" data-toggle="tab"><#=                    GetDisplayName(property.PropertyName) #></a></li>		 
				<# } else { #>
				<li role="presentation"  ><a href="#tab-<#=property.PropertyName   #>" aria-controls="tab-<#=property.PropertyName   #>" role="tab" data-toggle="tab"><#=                    GetDisplayName(property.PropertyName) #></a></li>		 		 
				<# } #>
				        
			 
<# 
				idx ++;
            }
        }
#>   
		 </ul>
		 <!-- Tab panes -->
         <div class="tab-content">
		  <#
			idx=0;
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
            if (property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            {
                var childrenmodelmeta=OneToManyModelMetadata[property.PropertyName];
				var detailmodelnameVar=property.PropertyName.ToLower();
          #>

		  <div role="tabpanel" class="tab-pane <#= idx>0?"":"active"  #>" id="tab-<#=property.PropertyName   #>">
                <div id="toolbar" class="btn-group">
                    <button type="button" id="add<#= detailmodelnameVar #>button" class="btn btn-default">
                        <i class="glyphicon glyphicon-plus"></i>
                    </button>

                    <button type="button" id="remove<#= detailmodelnameVar #>button" class="btn btn-default">
                        <i class="glyphicon glyphicon-trash"></i>
                    </button>
                </div>
                <div class="table-responsive">
                <table id="<#= detailmodelnameVar  #>-table"  class="table table-striped" data-search="true"
                       data-flat="false"
                       data-toolbar="#toolbar"
                       data-pagination="true"
                       data-show-refresh="true"
                       data-show-toggle="true"
                       data-show-columns="true">
                    <thead>
                        <tr>
                            <th data-formatter="<#= detailmodelnameVar  #>rowindexFormatter">#No</th>
		<#  
	foreach (PropertyMetadata chproperty in childrenmodelmeta.Properties) {
    if (chproperty.Scaffold ) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (chproperty.IsPrimaryKey && IsPropertyGuid(chproperty)) {
            continue;
        }
		#>
		
                            <# if ( chproperty.IsPrimaryKey || chproperty.IsForeignKey ) { #>
            <th data-field="<#= chproperty.PropertyName  #>"   data-visible="false" > <#= GetDisplayName(chproperty.PropertyName) #>
            </th>
        <# } else if (chproperty.AssociationDirection ==  AssociationDirection.ManyToOne ) { #>
            <th data-field="<#= GetRelatedDisplayNameExpression(chproperty,childrenmodelmeta)  #>"  > <#= GetDisplayName(chproperty.PropertyName) #>
            </th>
        <# } else { #>
        <th data-field="<#= chproperty.PropertyName  #>"  > <#= GetDisplayName(chproperty.PropertyName) #>
        </th>
        <#            } #>
        <# 
    }
    }
		 #>
                            <th data-field="action" data-formatter="<#= detailmodelnameVar #>actionFormatter" data-events="actionEvents">Action</th>
                        </tr>
                    </thead>
                </table>
                </div>
            </div>

		  <# 
            }
        }
		  #>

	</div>
</div>

<#
	 
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
            if (property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            { 
				var detailmodeltypename = property.RelatedModel.ShortTypeName;
                var childrenmodelmeta=OneToManyModelMetadata[property.PropertyName];
				var childrenmodelpk=childrenmodelmeta.PrimaryKeys[0].PropertyName;
				var detailmodelnameVar=property.PropertyName.ToLower();
				var boostraptablevar = "$" + property.PropertyName.ToLower()  + "table";
     #>
<!-- Modal  <#= detailmodeltypename   #>-->
<div class="modal fade" id="<#= detailmodeltypename.ToLower()  #>formModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="myModalLabel"><#=  detailmodeltypename  #></h4>
            </div>
            <div class="modal-body" id="<#= detailmodeltypename.ToLower()  #>formModal-body">
                @*@Html.Partial("_OrderDetailForm")*@
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                <button type="button" id="<#= detailmodeltypename.ToLower()  #>confirmbutton" class="btn btn-primary">OK</button>
            </div>
        </div>
    </div>
</div>
<# }} #>

<# } #>


<#  if(GenerateMasterDetailRelationship  && OneToManyModelMetadata.Count >0) { 
	var primaryKeyVar = ModelTypeName.ToLower() + primaryKey.ToLower();
#>
<script type="text/javascript">
	
	var currentrowindex = -1;
	<#
		var	idx=0;
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
            if (property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            { 
				var detailmodeltypename = property.RelatedModel.ShortTypeName;
                var childrenmodelmeta=OneToManyModelMetadata[property.PropertyName];
				var childrenmodelpk=childrenmodelmeta.PrimaryKeys[0].PropertyName;
				var detailmodelnameVar=property.PropertyName.ToLower();
				var boostraptablevar = "$" + property.PropertyName.ToLower()  + "table";
     #>

	 function delete<#= detailmodeltypename  #>(<#= childrenmodelpk.ToLower() #>) {
        var url = '@Url.Action("Delete<#= detailmodeltypename #>")';
        bootbox.dialog({
            message: "Are you sure delete " + id,
            title: "Delete <#= detailmodeltypename  #> ",
            buttons: {
                Cancel: {
                    label: "Cancel",
                    className: "btn-default",
                    callback: function () {

                    }
                },
                OK: {
                    label: "OK",
                    className: "btn-success",
                    callback: function () {
                        $.post(url, { id: <#= childrenmodelpk.ToLower() #> }, function (data) {
                            <#= boostraptablevar #>.bootstrapTable('remove', { field: '<#=  childrenmodelpk  #>', values: [<#= childrenmodelpk.ToLower() #>] });
                            //console.log('remove' + row.<#=  childrenmodelpk  #>);
                        });
                    }
                }
            }
        });
    }

	function <#= detailmodelnameVar  #>rowindexFormatter(value, row, index) {
        return index + 1;
    }
    function <#= detailmodelnameVar  #>actionFormatter(value, row, index) {
        return [
            '<a class="edit" id="<#=detailmodelnameVar  #>edit" href="javascript:void(0)" title="Add">',
            '<i class="glyphicon glyphicon-edit"></i>',
            '</a>  ',
            ' <a class="remove" id="<#= detailmodelnameVar #>remove" href="javascript:void(0)" title="Remove">',
            '<i class="glyphicon glyphicon-remove"></i>',
            '</a>'
        ].join('');
    }
	 <# }
        }
	 #> 
	 
	 window.actionEvents = {
	 <#
		idx=0;
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
            if (property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            { 
				var detailmodeltypename = property.RelatedModel.ShortTypeName;
				var detailmodeltypenameVar= detailmodeltypename.ToLower();
                var childrenmodelmeta=OneToManyModelMetadata[property.PropertyName];
				var childrenmodelpk=childrenmodelmeta.PrimaryKeys[0].PropertyName;
				var detailmodelpluralnameVar=property.PropertyName.ToLower();
				var boostraptablevar = "$" + property.PropertyName.ToLower()  + "table";
				
     #>
        'click #<#= detailmodelpluralnameVar #>edit': function (e, value, row, index) {
            currentrowindex = index;
            var url = "/<#= ControllerRootName #>/Edit<#= detailmodeltypename  #>"
            $.get(url + '/' + row.<#= childrenmodelpk #>, function (data) {
                $('#<#= detailmodeltypenameVar #>formModal-body').html(data);
                if (row.Id > 0) {
				<#  
				foreach (PropertyMetadata chproperty in childrenmodelmeta.Properties) {
					if (!chproperty.IsAssociation) {
						// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
						var fieldNameVar=chproperty.PropertyName.ToLower();
						var fieldName=chproperty.PropertyName;
				#>
					//var <#= fieldNameVar #> = $('#<#= fieldName  #>','#<#= detailmodeltypenameVar #>formModal-body');
					//<#= fieldNameVar #>.val(row.<#= fieldName  #>);
				<# }} #>
                } else {
				<#  
				foreach (PropertyMetadata chproperty in childrenmodelmeta.Properties) {
					if (!chproperty.IsAssociation) {
						// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
						var fieldNameVar=chproperty.PropertyName.ToLower();
						var fieldName=chproperty.PropertyName;
				#>
					var <#= fieldNameVar #> = $('#<#= fieldName  #>','#<#= detailmodeltypenameVar #>formModal-body');
					<#= fieldNameVar #>.val(row.<#= fieldName  #>);
				<# }} #>
                    
                }
                $('#<#= detailmodeltypenameVar #>formModal').modal('toggle');
            });
        } ,
        'click #<#= detailmodelpluralnameVar #>remove': function (e, value, row, index) {
            if (row.Id > 0) {
                delete<#= detailmodeltypename #>(row.<#= childrenmodelpk  #>);
            } else {
                <#= boostraptablevar #>.bootstrapTable('remove', {
                    field: '$index',
                    values: [index]
                });
            }
        }
    };

	<# }
	} 
	#>
	$(function () {
		<#
		idx=0;
        foreach (PropertyMetadata property in ModelMetadata.Properties) 
        {
            if (property.AssociationDirection == AssociationDirection.OneToMany && OneToManyModelMetadata.ContainsKey(property.PropertyName))
            { 
				var detailmodeltypename = property.RelatedModel.ShortTypeName;
				var detailmodeltypenameVar= detailmodeltypename.ToLower();
                var childrenmodelmeta=OneToManyModelMetadata[property.PropertyName];
				var childrenmodelpk=childrenmodelmeta.PrimaryKeys[0].PropertyName;
				var detailmodelpluralnameVar=property.PropertyName.ToLower();
				var boostraptablevar = "$" + property.PropertyName.ToLower()  + "table";

				var relmodemeta = OneToManyModelMetadata[property.PropertyName];
                var relatedEntities = relmodemeta.RelatedEntities;
                var foreignKeyNames = relatedEntities.Where(n=>n.EntitySetName == ModelMetadata.EntitySetName).Select(n=>n.ForeignKeyPropertyNames).First();
                var foreignKeyName = foreignKeyNames[0];
		#>
		<#= boostraptablevar #> = $('#<#= property.PropertyName.ToLower() #>-table').bootstrapTable({
            data: []
        });
        if (ObjectState == "Modified") {
             <#= primaryKeyVar #> =@Model.<#= primaryKey  #>;
            //<#= primaryKeyVar #> = $('#<#= primaryKey  #>').val();
            var url = '/<#= ControllerRootName #>/Get<#= property.PropertyName #>By<#= foreignKeyName #>/' + <#= primaryKeyVar #>;
            $.get(url, function (data) {
                //console.log(data);
                <#= boostraptablevar #>.bootstrapTable('load', data)
            })

        }

        $('#add<#= detailmodelpluralnameVar #>button').on('click', function (e) {
            if ($("form").valid()) {
                currentrowindex = -1;
                var url = "/<#= ControllerRootName #>/Create<#= detailmodeltypename   #>"
                $.get(url, function (data) {
                    //console.log(data);
                    var index = -1;
                    $('#<#= detailmodeltypenameVar  #>formModal-body').html(data);
                    $('#<#= childrenmodelpk  #>', '#<#= detailmodeltypenameVar  #>formModal-body' ).val(0);
					$('#<#= foreignKeyName #>' , '#<#= detailmodeltypenameVar  #>formModal-body').val(<#= primaryKeyVar #> );
                    $('#<#= detailmodeltypenameVar  #>formModal').modal('toggle');
                });
            }
            e.preventDefault();
            //Return false regardless of validation to stop form submitting
            //prior to ajax doing its thing
            return false;
        })

		$('#<#= detailmodeltypenameVar  #>confirmbutton').on('click', function (e) {
            $("form").removeData("validator");
            $("form").removeData("unobtrusiveValidation");
            $.validator.unobtrusive.parse("form");
            if (!$('form').valid()) {
                e.preventDefault();
                return false;
            }
			<#  
				foreach (PropertyMetadata chproperty in childrenmodelmeta.Properties) {
					if (!chproperty.IsAssociation) {
						// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
						var fieldNameVar=chproperty.PropertyName.ToLower();
						var fieldName=chproperty.PropertyName;
			#>
				 <#  if (chproperty.IsForeignKey) {#>
					var <#= fieldNameVar #> = $('#<#= fieldName #> :selected' , '#<#= detailmodeltypenameVar  #>formModal-body').val();
					
				 <# } else { #>
					var <#= fieldNameVar #> = $('#<#= fieldName #>' , '#<#= detailmodeltypenameVar  #>formModal-body').val();
				 <# } #>
			<#
               } else if (chproperty.AssociationDirection== AssociationDirection.ManyToOne) { 
				   var fieldNameVar = (chproperty.PropertyName + chproperty.RelatedModel.DisplayPropertyName).ToLower();
				   var  fieldName = GetForeignKeyPropertyName(childrenmodelmeta,chproperty.PropertyName);
			#>
					var <#= fieldNameVar #> = $('#<#= fieldName #> :selected' , '#<#= detailmodeltypenameVar  #>formModal-body').text();
			<# }} #>
            
            var <#= detailmodeltypenameVar #> = {
               <#  
				foreach (PropertyMetadata chproperty in childrenmodelmeta.Properties) {
					if (!chproperty.IsAssociation) {
						// If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
						var fieldNameVar=chproperty.PropertyName.ToLower();
						var fieldName=chproperty.PropertyName;
			#>
				 <#  if (chproperty.IsForeignKey) {#>
					 <#= fieldName #> :<#= fieldNameVar #> ,
					
				 <# } else { #>
					<#= fieldName #> : <#= fieldNameVar #> ,
				 <# } #>
			<#
               } else if (chproperty.AssociationDirection== AssociationDirection.ManyToOne) { 
				   var fieldNameVar = (chproperty.PropertyName + chproperty.RelatedModel.DisplayPropertyName).ToLower();
				   var  fieldName = (chproperty.PropertyName + chproperty.RelatedModel.DisplayPropertyName);
			#>
					<#= fieldName #> :<#= fieldNameVar #> ,
			<# }} #>
					ObjectState:'Added'
            }
            if (currentrowindex == '-1') {
                <#= boostraptablevar #>.bootstrapTable('append', <#= detailmodeltypenameVar #>);
            } else {
                <#= boostraptablevar #>.bootstrapTable('updateRow', { index: currentrowindex, row: <#= detailmodeltypenameVar #> });
            }

            $('#<#= detailmodeltypenameVar #>formModal').modal('toggle');
        });

		<# }} #>

	});


</script>
<# } #>


<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
<#+
string OutputEditorTemplate(string typeName){
        return( typeName=="DateTime" ? ", \"Date\"" : "");
}

string OutputEditorTemplateOrFormAttributes(string typeName){
        return( typeName=="DateTime" ? ", \"Date\"" : ", new { htmlAttributes = new { @class = \"form-control\" } }" );
}
#>