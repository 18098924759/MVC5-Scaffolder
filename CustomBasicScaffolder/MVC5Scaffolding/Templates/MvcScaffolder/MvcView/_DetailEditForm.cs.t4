<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
 
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ ScaffoldingAssembly Processor="ScaffoldingAssemblyLoader" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.AspNet.Scaffolding.Core.Metadata" #>
<#@ parameter type="System.String" name="ControllerRootName" #>
<#@ parameter type="System.String" name="ViewDataTypeName" #>
<#@ parameter type="System.Boolean" name="IsPartialView" #>
<#@ parameter type="System.String" name="ModelNameSpace" #>
<#@ parameter type="System.String" name="ViewPrefix" #>
<#@ parameter type="System.String" name="ViewName" #>
<#@ parameter type="System.String" name="ProgramTitle" #>
<#@ parameter type="System.String" name="MasterModelTypeName" #>
<#@ parameter type="Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata" name="ModelMetadata" #>
<#@ parameter type="System.Collections.Generic.Dictionary<string, string>" name="ModelDisplayNames" #>


@model <#= ViewDataTypeName #>

<# var primaryKey = ModelMetadata.PrimaryKeys[0].PropertyName; #>




<#
// "form-control" attribute is only supported for all EditorFor() in System.Web.Mvc 5.1.0.0 or later versions, except for checkbox, which uses a div in Bootstrap
string boolType = "System.Boolean";
Version requiredMvcVersion = new Version("5.1.0.0");
    bool isControlHtmlAttributesSupported = true;
// The following chained if-statement outputs the file header code and markup for a partial view, a view using a layout page, or a regular view.

foreach (PropertyMetadata property in ModelMetadata.Properties) {
    if (property.Scaffold && !property.IsReadOnly && !property.IsAssociation) {

        // If the property is a primary key and Guid, then the Guid is generated in the controller. Hence, this propery is not displayed on the view.
        if (property.IsPrimaryKey && IsPropertyGuid(property)) {
            continue;
        }
#>
<#if (property.IsPrimaryKey ){#>
    @Html.Hidden("<#= property.PropertyName #>",-1)
    @*@Html.HiddenFor(model => model.<#= property.PropertyName #>)*@ 
<#   } else if (property.IsForeignKey && HasRelatedMasterModelByForeignKey(ModelMetadata,property.PropertyName,MasterModelTypeName)) { #>
      @*--ForeignKey <#= property.PropertyName #> RelatedMasterModel  ---*@
      @Html.HiddenFor(model => model.<#=  property.PropertyName #>)
      @*<div class="form-group">
            @Html.LabelFor(model => model.<#=  property.PropertyName #>,  htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("<#=  property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.<#=                    property.PropertyName #>,"" , new { @class = "text-danger" })
            </div>
        </div>*@
       @*--End ForeignKey <#= property.PropertyName #> RelatedMasterModel  ---*@

<#  } else if (property.IsForeignKey && !HasRelatedMasterModelByForeignKey(ModelMetadata,property.PropertyName,MasterModelTypeName)) {  #>
		<div class="form-group">
            @Html.LabelFor(model => model.<#= property.PropertyName #>,   htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("<#= property.PropertyName #>", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.<#=  property.PropertyName #>,"" , new { @class = "text-danger" })
            </div>
        </div>
<#   } else { #>
        <div class="form-group">
            @Html.LabelFor(model => model.<#= property.PropertyName #>,   htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <# if (property.ShortTypeName=="DateTime") { #>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, "Date" ,new { htmlAttributes = new { @class = "form-control" } })
                <#  }else { #>
                @Html.EditorFor(model => model.<#= property.PropertyName #>, new { htmlAttributes = new { @class = "form-control" } })
                <#  } #>
                @Html.ValidationMessageFor(model => model.<#=                        property.PropertyName #>,"" , new { @class = "text-danger" })
            </div>
        </div>
<#                } #>
<# 
    }
}
#>

 


<#@ include file="ModelMetadataFunctions.cs.include.t4" #>
<#+
string OutputEditorTemplate(string typeName){
        return( typeName=="DateTime" ? ", \"Date\"" : "");
}

string OutputEditorTemplateOrFormAttributes(string typeName){
        return( typeName=="DateTime" ? ", \"Date\"" : ", new { htmlAttributes = new { @class = \"form-control\" } }" );
}

bool HasRelatedMasterModelByForeignKey(Microsoft.AspNet.Scaffolding.Core.Metadata.ModelMetadata modelMdetadata,string propertyName,string masterModelTypeName){
 
	return modelMdetadata.RelatedEntities.Where(n => n.ForeignKeyPropertyNames[0] == propertyName && n.TypeName == masterModelTypeName).Any();
}
#>